---
# NOTICE: WHEN ADDING A SERVICE, CLIENT or ANY PROGRAM
#
#         Use the name of the directory containing your main.go as the NAME
#         variable when invoking build-any
#
#         This will be automatically consistent with the binary names chosen
#         by go install

version: '3'

# Environment variables set for all commands.
env_build: &env_build
  # XDG_CACHE_HOME: This may need to be set for python builds, but try to use
  # virtual env instead.

  # The GOCACHE in a linux container on Docker for windows MUST be on a linuxy
  # file system
  GOCACHE: /tmp/datatrails/go-datatrails-common-api
  GOBIN:
    sh: echo ${GOBIN:-$HOME/go/bin}


vars:

  # DESTDIR
  # The path, relative to the api dir, where the outputs should be rooted.
  # * The common apis are exported to DESTDIR/api
  # * The necessary upstream includes are exported to DESTDIR/proto-include
  #
  # When using DESTDIR to create output paths, do NOT insert '/' characters.
  # Please do {{.DESTDIR}}{{.OUTDIR}} rather than {{.DESTDIR}}/{{.OUTDIR}}
  # Note that making DESTDIR=. does not work (cp same file to same file)
  # 
  DESTDIR: '{{.DESTDIR | default "../exported/"}}'

  # see https://github.com/golang/protobuf/issues/143
  # field_mask is a well known type that is recommend for use with UPDATE
  # requests and with GET requests where the subject is large. It has been a
  # google 'well known type' for ages. However due to issues google have with
  # internal apis overlapping it, it is not published in the same way. There
  # appears to be an on going effort/pantomime trying to align these public
  # and internal types. The following variable MUST be included in protoc
  # --go_out value in order to ensure the generated code has the correct
  # imports
  GOPKG_OVERRIDES: ",Mgoogle/protobuf/field_mask.proto=google.golang.org/genproto/protobuf/field_mask"

  # proto definition files whose versions can not be controlled by tools/go.mod
  # are collected in proto-include by the bootstrap tasks. Note the grpc_health
  # proto's are not currently versioned and are always taken from master
  GOOGLE_COMMON_PROTOS_VERSION: '{{.GOOGLE_COMMON_PROTOS_VERSION | default "1.50.0"}}'
  GOOGLE_COMMON_INC_ARCHIVE_BASEDIR: '{{.GOOGLE_COMMON_INC_ARCHIVE_BASEDIR | default "api-common-protos"}}'

tasks:

  bootstrap:
    desc: |
      download the third party proto definitions we require under proto-include

      If you have the correct version of go installed, this is sufficient to
      enable a host build without recourse to the builder image.

    cmds:
      - task: bootstrap:googleapis
      - task: bootstrap:grpc_health

  bootstrap:toolsupgrade:
    # only required to be run once when the version changes
    # this is only here for documentation purposes - if you want to upgrade
    # execute the go get -tool command manually
    dir: '../datatrails-common-api'
    cmds:
      - |
        set -euo pipefail

        go get -tool github.com/envoyproxy/protoc-gen-validate@latest
        go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
        go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
        go get -tool google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        go get -tool google.golang.org/protobuf/cmd/protoc-gen-go@latest


  bootstrap:googleapis:
    desc: download and prepare the google api proto definitions under proto-include
    dir: '..'
    cmds:
      - |
        rm -rf proto-include/google
        mkdir -p proto-include

        curl -fsSOL https://github.com/googleapis/api-common-protos/archive/refs/tags/{{.GOOGLE_COMMON_PROTOS_VERSION}}.tar.gz
        tar -xvzf {{.GOOGLE_COMMON_PROTOS_VERSION}}.tar.gz
        mv {{.GOOGLE_COMMON_INC_ARCHIVE_BASEDIR}}-{{.GOOGLE_COMMON_PROTOS_VERSION}}/google \
          proto-include/
        rm -f {{.GOOGLE_COMMON_PROTOS_VERSION}}.tar.gz
        rm -rf {{.GOOGLE_COMMON_INC_ARCHIVE_BASEDIR}}-{{.GOOGLE_COMMON_PROTOS_VERSION}}
        find proto-include -type d

  bootstrap:grpc_health:
    desc: download and prepare the grpc health definitions we require under proto-include
    dir: '..'
    cmds:
      - |
        rm -rf proto-include/grpc/health/v1
        mkdir -p proto-include/grpc/health/v1
        curl -fsSOL https://raw.githubusercontent.com/grpc/grpc-proto/master/grpc/health/v1/health.proto
        mv health.proto proto-include/grpc/health/v1/
        ls -la proto-include/grpc/health/v1/

  clean:generated:
    desc: delete generated proto buf code
    dir: '../datatrails-common-api'
    cmds:
      - for ff in $(find . -name "*.pb*.go"); do rm -f $ff; done
      - for ff in $(find . -name "*.swagger.json"); do rm -f $ff; done

  preflight:
    summary: |
      installs the tools/go.mod specified protoc plugins and .proto definitions
      the common apis depend upon

      And prepares the .proto's under proto-include so that consumers do not
      need to replicate the arrangements for finding the proto include paths

    dir: '../datatrails-common-api'
    vars:
      API_PROTO_DEPS: >-
        github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
        github.com/envoyproxy/protoc-gen-validate
    cmds:
      - |
        go install tool
      - for: { var: API_PROTO_DEPS }
        cmd: |
          depdir=$(GOCACHE=/tmp/datatrails/go-datatrails-common-api/api \
            go list -f {{"{{"}}.Dir{{"}}"}} {{.ITEM}})

          basedir=$(basename $depdir)
          basedir=${basedir%%@*} # strip the go module version
          rm -rf ../proto-include/${basedir}
          for proto in $(find $depdir -type f -name "*.proto"); do
            target=../proto-include/${basedir}/${proto#$depdir/}
            mkdir -p $(dirname $target)
            cp -v $proto $target
          done

      # move things around so that consumers only need to -I proto-include,
      # and do any general pruning or tidy up.
      - |
        # consumers of protoc-gen-validate expect a -I which allows them to do
        # import "validate/validate.proto". And we don't need the java bindings or the example bindings
        rm -rf ../proto-include/validate
        mv -v ../proto-include/protoc-gen-validate/validate ../proto-include/
        rm -rf ../proto-include/protoc-gen-validate


  postflight:
    summary: run after all api generation tasks
    dir: '../datatrails-common-api'
    cmds:
      - go mod tidy
      - go mod verify

  generate:
    desc: generate api grpc bindings
    dir: '../datatrails-common-api'
    cmds:
      - task: preflight
      - task: all-apis
      - task: postflight

  test:
    summary: run after all api generation tasks
    dir: '../datatrails-common-api'
    cmds:
      - |
        go build ./...
        go test ./...

  export:
    desc: export the sources to the desired DESTDIR
    dir: '../datatrails-common-api'
    vars:
      SOURCES: >-
        marshalers
        go.mod
        go.sum
      APIS: >-
        assets/v2/assets
        attribute/v2/attribute
        caps/v1/caps
        filter/v1/filter
        unittestapi
      # The defaults match the expectations of .github/workflows/ci.yml
      COMMON_GODIR: go-datatrails-common-api-gen
      COMMON_PROTODIR: datatrails-common-api
    cmds:
      - |
        mkdir -p {{.DESTDIR}}{{.COMMON_GODIR}}
        for name in {{.SOURCES}}; do
          cp -vr ${name} {{.DESTDIR}}{{.COMMON_GODIR}}/
        done

        mkdir -p {{.DESTDIR}}/proto-include/{{.COMMON_PROTODIR}}
        mkdir -p {{.DESTDIR}}/swagger

        # The source protos are all gathered under a 'google' common top dir
        for d in $(ls -d ../proto-include/*);
          do cp -vr $d {{.DESTDIR}}proto-include/
        done

        for api in {{.APIS}}; do
          mkdir -vp {{.DESTDIR}}{{.COMMON_GODIR}}/${api}
          cp -vr ${api}/*.go {{.DESTDIR}}{{.COMMON_GODIR}}/${api}
          mkdir -vp {{.DESTDIR}}swagger/${api}
          cp -vr ${api}/*.swagger.json {{.DESTDIR}}swagger/${api}
          mkdir -vp {{.DESTDIR}}proto-include/{{.COMMON_PROTODIR}}/${api}
          cp -vr ${api}/*.proto {{.DESTDIR}}proto-include/{{.COMMON_PROTODIR}}/${api}
        done

  all-apis:
    summary: generate code for all interfaces and copy related sources
    dir: '../datatrails-common-api'
    deps:
      - task: assetsv2-api
      - task: attributev2-api
      - task: capsv1-api
      - task: filterv1-api
      - task: unittestapi-api
    cmds:
      # dummy command, so api gen runs in parallel (deps do this automatically)
      - true

  assetsv2-api:
    summary: Generate the assetsv2 api
    cmds:
      - task: any-api
        vars: {API: "assets/v2/assets" }
  attributev2-api:
    summary: Generate the attributev2 api
    cmds:
      - task: any-api
        vars: {API: "attribute/v2/attribute" }

  capsv1-api:
    summary: Generate the filters api
    cmds:
      - task: any-api
        vars: {API: "caps/v1/caps" }

  filterv1-api:
    summary: Generate the filters api
    cmds:
      - task: any-api
        vars: {API: "filter/v1/filter" }

  # Don't export this - its just for unit testing.
  unittestapi-api:
    summary: Generate the test api
    cmds:
      - task: any-api
        vars: {API: "unittestapi" }

  any-api:
    # dev-notes/build-warts.md#always-set-dir-relative-to-current-task-file
    dir: '..'
    # summary: Generate the service grpc stubs, rest http proxy and swagger json for any api
    #
    cmds:
      # Generate the gRPC service stub
      # Generates the HTTP reverse proxy for the gRPC service.
      # Generates the swagger definitions for the gRPC service.
      # Generates the html docs for the gRPC service.
      - |
        protoc -I . -I proto-include \
         --go_out=paths=source_relative:{{.OUTPATH}} \
         --go-grpc_out=paths=source_relative:{{.OUTPATH}} \
         --validate_out=lang=go,paths=source_relative:{{.OUTPATH}} \
         --openapiv2_out={{.OUTPATH}} \
         --openapiv2_opt disable_default_errors=true \
         --openapiv2_opt json_names_for_fields=false \
         --openapiv2_opt logtostderr=true \
         --grpc-gateway_out=paths=source_relative,logtostderr=true:{{.OUTPATH}} \
         --plugin {{.GOBIN}}/protoc-gen-doc \
         --doc_out={{.SRCPATH}}{{.API}}/ \
         --doc_opt={{.SRCPATH}}confluence_doc.tmpl,{{.SRCPATH}}confluence.storage \
         {{.SRCPATH}}{{.API}}/*.proto
    vars:
      SRCPATH: datatrails-common-api/
      # OUTPATH: datatrails-common-api
      OUTPATH: . 
      GOBIN:
        sh: echo ${GOBIN:-$HOME/go/bin}
